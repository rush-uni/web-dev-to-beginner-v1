<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端开发初级成长计划 v1</title>
    <link>https://rush-uni.github.io/</link>
    <description>Recent content on 前端开发初级成长计划 v1</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 10 Feb 2021 18:45:18 +0800</lastBuildDate><atom:link href="https://rush-uni.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://rush-uni.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://rush-uni.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://rush-uni.github.io/posts/my-first-post/</link>
      <pubDate>Wed, 10 Feb 2021 18:45:18 +0800</pubDate>
      
      <guid>https://rush-uni.github.io/posts/my-first-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://rush-uni.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://rush-uni.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/buttons/</guid>
      <description>Buttons #  Buttons are styled links that can lead to local page or external link.
Example #  {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/columns/</guid>
      <description>Columns #  Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example #  Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/details/</guid>
      <description>Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.
Example #  {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /details &amp;gt;}} Title Markdown content Lorem markdownum insigne&amp;hellip;   </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/expand/</guid>
      <description>Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example #  Default #  {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}   展开 ↕  Markdown content Lorem markdownum insigne&amp;hellip;    With Custom Label #  {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/hints/</guid>
      <description>Hints #  Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example #  Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/katex/</guid>
      <description>KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX
Example #  {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi {{&amp;lt; /katex &amp;gt;}}     Display Mode Example #  Here is some inline example:  \(\pi(x)\)  , rendered in the same line. And below is display example, having display: block  \[f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi\]  Text continues here.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/mermaid/</guid>
      <description>Mermaid Chart #  Mermaid is library for generating svg charts and diagrams from text.
Example #  {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end {{&amp;lt; /mermaid &amp;gt;}}     </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/section/page1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/section/page1/</guid>
      <description>Page 1 #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/section/page2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/section/page2/</guid>
      <description>Page 2 #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/shortcodes/tabs/</guid>
      <description>Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example #  MacOS MacOS This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/table-of-contents/01.-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/table-of-contents/01.-%E6%A6%82%E8%BF%B0/</guid>
      <description>概述 #  1. 欢迎 #  通过《前端开发初级成长计划 v1》，你将获得 HTML，CSS 和 JavaScript 的代码编写经验，学习如何通过 Git 命令来保存你的代码，以及使用 Node.js 为你的网站提供服务。
以下是本计划所涉及的内容大纲：
 概述 HTML CSS HTML和CSS实战 JavaScript HTML,CSS和JavaScript实战 Ajax 使用第三方库 Git和Bash Node.js 部署App  作为《前端开发初级成长计划 v1》的开始篇章，首先介绍成为 Web 开发人员涉及的一些基础知识。
让我们开始。
2. 我们将学习什么 #  总的来说，我们将学习创建一个网站所需要的基础知识。
2.1 掌握术语 #  学习编程中首先碰到的困难可能是你需要去理解编程开发中所使用的术语。
本计划主要是面向 Web 前端开发，所以我们确实需要知道一些单词说的是什么意思。
比如 超链接，级联样式表，函数，作用域等等。
 但是有些术语在学习初阶可以暂时忽略，比如 Monad。
 重点是我们将学习几种语言。
需要注意的是在创建网站的过程中所使用的的语言并不一定是编程语言，它可能只是一门计算机语言，比如我们的 HTML 和 CSS。
 我们在后面肯定会学习这俩家伙，它们通常被称为标记语言和样式语言。
 2.2 创建一个网站的过程 #  我们将使用盖房子这个比喻来探讨和阐述创建一个网站的过程。
这其中引入了创建网站所涉及的三种语言以及它们各自的作用。
2.2.1 搭建 #  要建造房子，你需要使用到工具（比如文本编辑器，浏览器，终端）。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rush-uni.github.io/docs/table-of-contents/02.-html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rush-uni.github.io/docs/table-of-contents/02.-html/</guid>
      <description>HTML #  1. 欢迎 #  </description>
    </item>
    
  </channel>
</rss>
